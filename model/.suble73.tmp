package model

import (
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

type Wish struct {
	Id          bson.ObjectId
	Name        string `form:"name"`
	Description string `form:"description"`
}

type ModelConfig struct {
	url             string
	collectionNames map[string]string
	databaseName    string
	collectionName  string
}

var collectionName string
var databaseName string
var config ModelConfig
var mgoSession *mgo.Session

func Init(url, database string, collection map[string]string) {
	config = ModelConfig{
		url:             url,
		databaseName:    database,
		collectionNames: collection,
	}
}

func GetSession() *mgo.Session {
	if mgoSession == nil {
		var err error
		mgoSession, err = mgo.Dial(config.url)
		if err != nil {
			panic(err)
		}
	}
	return mgoSession.Clone()
}

func WithCollection(collection string, s func(*mgo.Collection) error) error {
	session := GetSession()
	defer session.Close()
	c := session.DB(databaseName).C(collection)
	return s(c)
}

func SearchWish(q interface{}, skip int, limit int) (searchResults []Wish, searchErr string) {
	searchErr = ""
	searchResults = []Wish{}
	query := func(c *mgo.Collection) error {
		fn := c.Find(q).Skip(skip).Limit(limit).All(&searchResults)
		if limit < 0 {
			fn = c.Find(q).Skip(skip).All(&searchResults)
		}
		return fn
	}

	search := func() error {
		return WithCollection("wishes", query)
	}
	err := search()
	if err != nil {
		searchErr = "Database Error"
	}
	return
}

func GetWishByName(name string, skip int, limit int) (searchResults []Wish, searchErr string) {
	searchResults, searchErr = SearchWish(bson.M{"name": bson.RegEx{"^" + name, "i"}}, skip, limit)
	return
}

// GetAll returns all Wishes in the database
func GetAll(db *mgo.Database) []Wish {
	var wishlist []Wish
	db.C(collectionName).Find(nil).All(&wishlist)
	return wishlist
}

func SetName(name string) {
	collectionName = name
}

func (w *Wish) Save(db *mgo.Database) {
	db.C(collectionName).Insert(w)
}
